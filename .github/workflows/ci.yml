name: CI

on:
  pull_request:
  push:
    branches: [main]

env:
  MIN_COVERAGE: 0.3

permissions:
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Run tests on iOS Simulator
        shell: bash
        run: |
          xcodebuild -scheme BuiltinRegistryGenerator -destination "platform=macOS"
          xcodebuild test -scheme LiveViewNative-Package -sdk iphonesimulator17.0 -destination "OS=17.0,name=iPhone 14 Pro" -enableCodeCoverage YES -resultBundlePath TestResults -skipMacroValidation -skipPackagePluginValidation
      - uses: kishikawakatsumi/xcresulttool@v1
        with:
          path: TestResults.xcresult
        continue-on-error: true
        if: success() || failure()
      - name: Validate Coverage %
        shell: bash
        run: |
          COVERAGE=$(xcrun xccov view --report --json TestResults.xcresult | jq '.targets[] | select(.name == "LiveViewNative") | .lineCoverage')
          if [ $(echo "$COVERAGE > $MIN_COVERAGE" | bc) -ne 1 ]; then
            printf "Code coverage $COVERAGE does not meet minimum requirement $MIN_COVERAGE"
            exit -1
          else
            printf "Code coverage $COVERAGE meets minimum requirement $MIN_COVERAGE"
          fi
      - name: Build for macOS
        shell: bash
        run: |
          xcodebuild -scheme LiveViewNative-Package -sdk macosx13.6 -destination "platform=macOS" -skipMacroValidation -skipPackagePluginValidation
      - name: Build for watchOS
        shell: bash
        run: |
          xcodebuild -scheme LiveViewNative-Package -sdk watchsimulator10.0 -destination "OS=10.0,name=Apple Watch Series 8 (45mm)" -skipMacroValidation -skipPackagePluginValidation
      - name: Build for tvOS
        shell: bash
        run: |
          xcodebuild -scheme LiveViewNative-Package -sdk appletvos17.0 -destination "name=Any tvOS Device" -skipMacroValidation -skipPackagePluginValidation
