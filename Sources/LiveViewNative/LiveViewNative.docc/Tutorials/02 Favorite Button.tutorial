@Tutorial(time: 30) {
    @Comment {
        index = 2
    }
    @XcodeRequirement(title: "Xcode 13.3", destination: "https://developer.apple.com/download/applications/")
    
    @Intro(title: "Storing User Favorites") {
        Now that you've built a simple app to display a list, let's add a bit of interactivity. To each list row, we'll add a favorite button that can be used to pin cats to the top of the list.
        
        @Image(source: 02-00-intro-header.png, alt: "An iPhone app showing a list of cats with some marked as favorites.")
    }
    
    @Section(title: "Updating the Backend") {
        Let's update the backend to track which cats are favorited. For the purposes of this tutorial, we'll only store this information socket's assigns, rather than building out persistence.
        
        @Steps {
            @Step {
                We'll use a simple GenServer to store which cats have been favorited.
                
                In an actual application, you'd use something persistent, such as a database. But a non-persistent GenServer will do for this tutorial.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial/favorites_store.ex", file: 02-01-01-genserver.ex)
            }
            
            @Step {
                Then, open the `application.ex` file.
                
                @Comment {
                    skip = true
                }
                @Code(name: "lib/lvn_tutorial/application.ex", file: 02-01-02-application.ex)
            }
            
            @Step {
                Add the favorites store GenServer to the supervision tree. 
                
                Once you've done that, restart the Phoenix project so that the GenServer is started.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial/application.ex", file: 02-01-03-application.ex)
            }
            
            @Step {
                Open the `cats_list_live.ex` file.
                
                @Comment {
                    skip = true
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 01-03-03-cats_list_live.ex)
            }
            
            @Step {
                Let's add a new function called `get_cats_and_favorites` that builds a sorted list of cats and their favorite status, pulling from the GenServer we created before.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-01-05-build-list.ex)
            }
            
            @Step {
                Then, we'll assign the result of that function to `cats_and_favorites` in the `mount` callback so we can use it in the template.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-01-06-assign.ex)
            }
        }
    }
    
    @Section(title: "Adding the Favorite Button") {
        In this section, we'll add the favorite button to the user interface.
        
        @Steps {
            @Step {
                Open `cats_list_live.ex`
                
                @Comment {
                    skip = true
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-01-06-assign.ex)
            }
            
            @Step {
                First, we'll update the comprehension in the template to handle the added field.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-02-02-cats_list_live.ex)
            }
            
            @Step {
                Then, to the `<HStack>`, add a spacer and a button.
                
                The content of the button will be an `<Image>`, which can be used to display an SF Symbol. In our case, we'll use either the filled or unfilled star depending on whether the cat is favorited. We'll also use the `symbol-color` attribute to tint it gold when the cat is favorited.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-02-03-cats_list_live.ex) {
                    @Image(source: 02-02-03-button-preview.png, alt: "The list of cats with black, star outlines to the right of each list item.")
                }
            }
            
            @Step {
                Next, we'll add a `phx-click` event to the button. An event with the name we provide will be dispatched to the live view when the button is tapped.
                
                Any `phx-value-*` attributes we include on the button will be collected into a map and provided to the event handler as well.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-02-04-cats_list_live.ex)
            }
            
            @Step {
                In the event handler, we'll update the favorite state of the cat at the given index and the re-sort the list and assign it back to the socket.
                
                LiveView on the backend will automatically re-render the template and send an update to the client which will display it.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-02-05-cats_list_live.ex) {
                    @Video(source: 02-02-06-favorites.mp4, poster: 02-02-07-favorites-poster.png)
                }
            }
        }
    }
}
