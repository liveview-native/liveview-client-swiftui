@Tutorial(time: 30) {
    @Comment {
        index = 4
    }
    @XcodeRequirement(title: "Xcode 13.3", destination: "https://developer.apple.com/download/applications/")
    
    @Intro(title: "Add a Custom HTML Element") {
        Let's add a custom control that allows users to assign specific star ratings to cats in our app.
        
        @Image(source: 04-00-intro-header.png, alt: "Five red hearts below an image of a cat.")
    }
    
    @Section(title: "Setting Up the Registry") {
        Setup the custom registry and connecting it to the coordinator.
        
        @Steps {
            @Step {
                In the iOS app, create a new file called `MyRegistry.swift` which will contain the custom registry implementation.
                
                The ``CustomRegistry`` protocol defines the interface you use to provide custom elements and attributes to LiveView Native.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/MyRegistry.swift"
                }
                @Code(name: "MyRegistry.swift", file: 04-01-01-registry.swift)
            }
            
            @Step {
                The `TagName` enum defines all of the custom elements that your registry can handle.
                
                The `lookup` method is called by the framework when it encounters a element with one of your declared tag names.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/MyRegistry.swift"
                }
                @Code(name: "MyRegistry.swift", file: 04-01-02-tag.swift)
            }
            
            @Step {
                In the `lookup` method, we'll construct a `CatRatingView`, passing in the `context` parameter of the lookup method. This will cause a compiler error, but don't worry; in Section 3, we'll implement the view and resolve it.
                
                The `context` is a ``LiveContext`` struct containing additional information about the context in which the element is being used.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/MyRegistry.swift"
                }
                @Code(name: "MyRegistry.swift", file: 04-01-03-view.swift)
            }
            
            @Step {
                Next, open the `ContentView.swift` file.
                
                @Comment {
                    skip = true
                }
                @Code(name: "ContentView.swift", file: 03-02-01-navigationmode.swift)
            }
            
            @Step {
                Lastly, update how the coordinator is constructed so that it uses our custom registry.
                
                All the methods and properties on the registry are `static`, so rather than constructing an instance of it, we only need to provide its type as a generic parameter to the coordinator.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/ContentView.swift"
                }
                @Code(name: "ContentView.swift", file: 04-01-04-session.swift)
            }
        }
    }
    
    @Section(title: "Update the GenServer") {
        Let's quickly update the GenServer on the backend to store the scores as well as the favorite state.
        
        @Steps {
            @Step {
                Open the `favorites_store.ex` file.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial/favorites_store.ex", file: 02-01-01-genserver.ex)
            }
            
            @Step {
                Update the favorites store to have as its state a map of names to scores, in addition to the list of favorites.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial/favorites_store.ex", file: 04-02-01-genserver.ex)
            }
            
            Make sure to restart the Phoenix server after updating the GenServer, because the old in-memory state will be invalid!
        }
    }
    
    @Section(title: "Building the View") {
        Now that the registry is all setup, let's build the actual SwiftUI view our custom element is going to use.
        
        @Steps {
            @Step {
                Create the `CatRatingView` struct. This will conform to SwiftUI's `View` protocol and have fields for the element and context.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-01-empty-view.swift)
            }
            
            @Step {
                Next, let's add properties for the element, context, and score.
                The ``Attribute`` property wrapper provides access to an attribute on the DOM element, and will automatically update the view whenever there's a change to the element.

                The ``LiveContext`` property wrapper will allow us to send events to the LiveView.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-02-initializer.swift)
            }
            
            @Step {
                Add a couple of `@State` variables that will be used for building the interaction.
                The `editedScore` variable will hold the current score as the user is dragging their finger to edit it, but before it's been committed.
                The `width` variable will store the width of the view on screen, which is needed to turn the absolute position of the user's finger into a fraction.
                Finally, `effectiveScore` is a helper property that the view body wil use to read the score that should currently be displayed.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-03-properties.swift)
            }
            
            @Step {
                In the view body, we'll use an `HStack` with two `ForEach` loops to display a set of heart icons. Based on the effective score, some number of them will be filled in and colored red to indicate the current score.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-04-hearts.swift)
            }
            
            @Step {
                Next, a `GeometryReader` in the background will read the width of the view into the `@State` variable we set up before.
                
                This is in a `.background` modifier so that it doesn't affect the size of our view. A SwiftUI view preference is used to communicate the `GeometryReader` width up to our view without altering state during the evaluation of the body, which SwiftUI forbids.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-05-width-reader.swift)
            }
            
            @Step {
                We'll add a `DragGesture` to the row and tap gestures to the individual hearts to allow the user to either tap on a heart or to drag their finger across the row to set the score.
                
                The desired score is calculated by looking at the X position of the tap/drag relative to the full width of the view, and converting that into a number from 0 through 5.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-06-gestures.swift)
            }
            
            @Step {
                Finally, we'll implement the `setScore` method to send an event with the new score to the backend using ``LiveViewCoordinator/pushEvent(type:event:value:)``.
                
                The `type` parameter to `pushEvent` can be anything you like; here we use "click" because it matches a type already used by LiveView on the web. The `name` parameter is the name of the event handler that will be invoked on the backend.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/CatRatingView.swift"
                }
                @Code(name: "CatRatingView.swift", file: 04-03-07-pushevent.swift)
            }
        }
    }
    
    @Section(title: "Using the Element") {
        Finally, let's update the backend to use the newly added element.
        
        @Steps {
            @Step {
                Open `cat_live.ex`.
                
                @Comment {
                    skip = true
                }
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 03-01-02-cat_live.ex)
            }
            
            @Step {
                Update the `mount` callback to assign the current score from the store to the socket, and add a new event handler called `change-score` which updates the favorites store and then assigns the new score to the socket.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 04-04-02-cat_live.ex)
            }

            @Step {
                Add the `<CatRating>` element to the template below the image, assigning the `score` attribute from the assign.
                
                With that, you can re-run the app and view and edit scores to your heart's content!
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 04-04-03-cat_live.ex) {
                    @Video(source: 04-04-03-preview.mp4, poster: 04-04-04-preview-poster.png)
                }
            }
        }
    }
}
