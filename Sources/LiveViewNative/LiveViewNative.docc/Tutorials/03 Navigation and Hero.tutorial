@Tutorial(time: 30) {
    @Comment {
        index = 3
    }
    @XcodeRequirement(title: "Xcode 13.3", destination: "https://developer.apple.com/download/applications/")
    
    @Intro(title: "Navigation and Detail View") {
        The list of cats is great, but the images are a little small. Let's add a detail view so we can see them nice and big!
        
        @Image(source: 03-00-intro-header.png, alt: "The app with the detail view showing Jorts the cat.")
    }
    
    @Section(title: "Building the Detail View") {
        Add a route and build the detail view.
        
        @Steps {
            @Step {
                The first thing we'll need to do is update the router to add a new route.
                
                We also change the existing route to be combined with a new one in a `live_session`. This is required so that the WebSocket connection can be reusedâ€”minimizing navigation latency. Read more about live sessions in the [LiveView docs](https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.Router.html#live_session/3).
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/router.ex", file: 03-01-01-router.ex)
            }
            
            @Step {
                Then, add the live view for the route we just created. This one will be very simple: it has a render function similar to the list and in the `mount` callback, we assign the name parameter from the route to the socket for use in the template.
                
                In a production app, you would want to perform validation here. But for this tutorial, we're just going to assume that whatever's in the route is a valid cat.

                We'll start with a simple template for this view that just displays the cat's image.
                
                The `navigation_title` modifier is used to assign a title that will be displayed in the navigation bar of our app. In the next section, you'll see how this is added.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cat_live.ex", file: 03-01-02-cat_live.ex)
            }
        }
    }
    
    @Section(title: "Adding Navigation") {
        Setup navigation in Swift and link the list to the detail page.
        
        @Steps {
            @Step {
                In the `ContentView.swift` file in your iOS app, update how the coordinator is constructed. 
                
                Enabling navigation alters the appearance of your view by adding a SwiftUI `NavigationView` to the view hierarchy, which is why navigation is opt-in.
                
                @Comment {
                    project = "app"
                    path = "LVNTutorialApp/ContentView.swift"
                }
                @Code(name: "ContentView.swift", file: 03-02-01-navigationmode.swift)
            }
            
            @Step {
                Open the `cats_list_live.ex` file.
                
                @Comment {
                    skip = true
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 02-02-05-cats_list_live.ex)
            }
            
            @Step {
                With the configuration updated, you can add a `navigation_title` modifier to the list template.
                
                After re-running the iOS app from Xcode (required because the Swift code changed), you should see your new navigation bar and title.
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 03-02-03-cats_list_live.ex) {
                    @Image(source: 03-02-03-nav-title-preview.png, alt: "The list of cats, with a title that reads 'Cats!'")
                }
            }
            
            @Step {
                Next, wrap the `<HStack>` in a `<NavigationLink>`. This element functions like an HTML anchor tag, indicating that, when tapped, the client should navigate to a new page. The attributes we provide tell the client which mode to navigate in and to which page. Don't forget to move the `id` attribute from the `<HStack>` to the link!
                
                Once you've done that, you can tap a cat on the list and navigate to the detail view and see the larger image!
                
                @Comment {
                    project = "backend"
                }
                @Code(name: "lib/lvn_tutorial_web/live/cats_list_live.ex", file: 03-02-04-cats_list_live.ex) {
                    @Video(source: 03-02-05-navigation-preview.mp4, poster: 03-02-06-navigation-preview-poster.png)
                }
            }
        }
    }
}
